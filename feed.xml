<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>董轩男的个人主页</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-07-02T21:01:33+08:00</updated> <author> <name>Xuannan Dong</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Xuannan Dong </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>买卖股票问题</title><link href="/posts/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/" rel="alternate" type="text/html" title="买卖股票问题" /><published>2021-07-02T20:00:00+08:00</published> <updated>2021-07-02T20:00:00+08:00</updated> <id>/posts/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/</id> <content src="/posts/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/" /> <author> <name>Xuannan Dong</name> </author> <category term="工作相关" /> <category term="算法学习" /> <summary> 动态规划 买卖股票问题是动态规划里面非常常见的一类问题，主要是因为他的变种非常多。我在一开始接触的时候每次都会绞尽脑汁针对每一类变种去思考他的“巧法”，直到后来看到一些文章分析，用动态规划的思想可以将他一网打尽。说起动态规划，我们做关注的无非是状态和选择。而在股票问题里面，这二者非常明显。状态：天数，是否持有股票，买卖剩余机会，和选择：买入，卖出，无操作。由此可见是一类非常明显的用动态规划可解的题目。而在实际操作过程中我遇到了一些困难，感觉参考文章写的也不是很清晰。 1）三维降二维 由于表示状态的变量有三个，所以理论上来讲需要用一个三维数组进行表示，这看上去只不过是维数的增加，实际上在写代码过程中对我造成了极大的不便，base case， 遍历方向，转移方程都很难想想。对于我来说，最简单的dp即是一维数组从左到右的遍历；或者是二维数组从坐上到右下的遍历。 解决方法： 如果想到... </summary> </entry> <entry><title>回溯算法心得</title><link href="/posts/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/" rel="alternate" type="text/html" title="回溯算法心得" /><published>2020-12-01T12:00:00+08:00</published> <updated>2020-12-01T12:00:00+08:00</updated> <id>/posts/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</id> <content src="/posts/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/" /> <author> <name>Xuannan Dong</name> </author> <category term="工作相关" /> <category term="算法学习" /> <summary> 回溯算法心得 回溯算法我觉得是最贴近我思考问题逻辑的一种方法，在小学做数学题的时候，题目变量的范围往往是个位数级别的，然后就直接开始列举所有的可能，美其名曰“枚举法”。碰到奥数题，一些题目加上了限制，得闭着眼睛仔细想想有没有哪些情况漏了，哪些情况是不可以的，考虑全了就拿高分。最近刷了一些回溯算法的题目，感觉挺像的，总结一下就是有条件地遍历所有可能，感觉和自己平时思考问题地方式非常相似。 说起决策的遍历就能很自然地想到决策树结构，每一个树节点都代表一个决策过程，用dfs遍历一整课树就相当于考虑了这个问题的所有情况。一般来说在解决一个问题的过程中会考虑两个方面吧：（1）我要解决的问题是什么？（2）我目前的状态是什么，导致我有哪些选择。回溯法同样，在遍历的过程中需要传递的参数是（1）目标变量 （2）当前路径变量。伪代码如下： result = [] def backtrack(目标，... </summary> </entry> <entry><title>Yelp-Camp Project开发记录</title><link href="/posts/yelp/" rel="alternate" type="text/html" title="Yelp-Camp Project开发记录" /><published>2020-12-01T12:00:00+08:00</published> <updated>2020-12-01T12:00:00+08:00</updated> <id>/posts/yelp/</id> <content src="/posts/yelp/" /> <author> <name>Xuannan Dong</name> </author> <category term="工作相关" /> <category term="技术学习" /> <summary> Yelp-Camp Project开发记录 项目代码 项目地址 最近在Udemy上学习Colt Steele的课程《The Web Developer Bootcamp 2020》,最后有一个大作业是Yelp app的制作，结合了前面所学的html+css+JavaScript+express+node.js+mongo，由于涉及的框架非常多，且在学习的过程中比较懒，除了完成编程的quiz很少自己动手打一遍代码，所以决定这个项目好好做用于巩固。 项目基于RESTful 原则,简单的概括为以下三条。 　　（1）每一个URI代表一种资源； 　　（2）客户端和服务器之间，传递这种资源的某种表现层； 　　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。 然后理一下这个web app开发的大致流程以及应用到的框架。依据上述的RESTfu原则，我要做... </summary> </entry> <entry><title>字节后端实习面试复盘</title><link href="/posts/%E5%AD%97%E8%8A%82%E5%90%8E%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/" rel="alternate" type="text/html" title="字节后端实习面试复盘" /><published>2020-12-01T12:00:00+08:00</published> <updated>2020-12-01T12:00:00+08:00</updated> <id>/posts/%E5%AD%97%E8%8A%82%E5%90%8E%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/</id> <content src="/posts/%E5%AD%97%E8%8A%82%E5%90%8E%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/" /> <author> <name>Xuannan Dong</name> </author> <category term="工作相关" /> <category term="实习经历" /> <summary> 2020/11/30字节后端实习面试 昨天刚面完字节后端，连续三轮，每一轮大概五十分钟左右，三小时下来脑子有点不清楚，到最后一面的时候耿直地回答了一些问题，当场暴毙。先写在前面引以为戒。 面试官：以后打算在哪里工作？ 我：杭州，我家在杭州。（字节base在北京） 面试官：这个面试准备了多久？ 我：从我加您微信开始准备的。 面试官：只准备了一个周末？ 之后问我什么时候能去实习，我说一月份，他说那你一月分再来找我吧，这一个月你好好学习准备。 接下来回忆一下面经，因为本身就是三轮一起面的，也分不清楚具体哪轮问了哪些问题了，就全都写一起了。 https和http的区别。（答了安全性，又继续问如何实现） JVM内存模型，哪些是线程共享的，哪些是线程私有的。 什么是死锁。 一个大小为1G的文件里面，每一行存了大小不超过16字节的单词，给你1M的内存空间，要求返回出现频率前... </summary> </entry> <entry><title>网易数据挖掘实习生小结</title><link href="/posts/%E7%BD%91%E6%98%93%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E4%B9%A0%E5%B0%8F%E7%BB%93/" rel="alternate" type="text/html" title="网易数据挖掘实习生小结" /><published>2020-11-27T12:00:00+08:00</published> <updated>2020-11-27T12:00:00+08:00</updated> <id>/posts/%E7%BD%91%E6%98%93%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E4%B9%A0%E5%B0%8F%E7%BB%93/</id> <content src="/posts/%E7%BD%91%E6%98%93%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E4%B9%A0%E5%B0%8F%E7%BB%93/" /> <author> <name>Xuannan Dong</name> </author> <category term="工作相关" /> <category term="实习经历" /> <summary> 网易游戏雷火事业群实习小结 2020年8月到2020年11月期间我在网易雷火游戏部门做数据挖掘实习生。因为是自己的第一份实习工作，从投简历到面试到入职，感觉收获极大。 之前没有接触过正式的开发过程，一些代码模型规模较小，都是在在自己的电脑上自己搭环境运行。在实际的开发过程中，项目代码会存储在类似于gitlab的代码仓库中，然后部署在对应集群上运行。一般每一个开发人员都会起一个自己的测试环境，将项目代码从gitlab上拉到自己的测试环境中进行开发，在测试环境进行调试，确认无符合要求无bug之后，再通过git push同步到gitlab中，对正式代码进行修改。（mentor再三嘱咐我一定要在测试环境中确认无bug，不然会发邮件到QA那边警告，而之后我也确实用实际行动证明了这真的orz）。这里涉及到两个连接：一是本地和测试环境的连接，二是本地和代码仓库的链接。二者的连接都是通过ssh的认... </summary> </entry> </feed>
